/**

## Setup Instructions
- If you want more practice working with Git and Github, fork this project on GitHub and then clone your fork to your development box, so you have both your own local copy and a remote in GitHub where you can push your solutions.
- Go here https://glitch.com/edit/#!/remix/ten-functions if you only want to focus on the problems and side-step the git process.

## Getting Started
0. Setup your own copy of the code using the instructions above
1. Read the exercise prompts listed below
2. Define your functions that solve the prompts inside of `solutions.js`.
3. Use feedback to improve responses
4. Submit issues and patches to the <a href="https://github.com/ryanorsinger/ten-functions/issues">Ten Functions project</a>


## The "Ten Functions" Exercises ðŸ‘Ÿ
0. The comments to the right of the function call example demonstrate the output of the function's operation on the provided input(s). Add your function definitions to `solutions.js`. Refresh `results.html` to run automated tests for feedback on your solutions.

--
3. Use feedback to improve responses
4. Submit issues and patches to the <a href="https://github.com/ryanorsinger/ten-functions/issues">Ten Functions project</a>


## The "Ten Functions" Exercises ðŸ‘Ÿ
0. The comments to the right of the function call example demonstrate the output of the function's operation on the provided input(s). Add your function definitions to `solutions.js`. Refresh `results.html` to run automated tests for feedback on your solutions.
*/

console.log('js file is linked');

//==================================
console.log('==================');
console.log('==isTrue==');
// 1. Define a function named `isTrue` that takes in any input and returns true if the input provided is exactly equal to `true` in value and data type.
 function isTrue(x){
         if(x === true)
         return true;
         else return false;
 }
 console.log(isTrue(true) );
 console.log(isTrue(false) );
 console.log(isTrue(0) );
 console.log(isTrue(null) );
 console.log(isTrue('true') );
 console.log(isTrue('Banana') );
 console.log(isTrue([1, 2]) );
//         isTrue(true)             // true
//         isTrue(false)            // false
//         isTrue(0)                // false
//         isTrue(null)             // false
//         isTrue("true")           // false
//         isTrue("Banana")         // false
//         isTrue([1, 2])           // false



//==================================
console.log('==================');
console.log('===isFalse==');
// 2. Define a function named `isFalse` that takes in a value and returns a true if and only if the provided input is equal to false in both type and value.
  
function isFalse(x){
       //  if(x === false)
       //  return true;
       //  else return false;
       return x === false;
}
//         isFalse(false)             // true
//         isFalse(true)              // false
//         isFalse(0)                 // false
//         isFalse(null)              // false
//         isFalse("")                // false
//         isFalse("Banana")          // false
//         isFalse([1, 2])            // false

console.log(isFalse(false));
 console.log(isFalse(true));
 console.log(isFalse(0));
 console.log(isFalse(null));
 console.log(isFalse(""));
 console.log(isFalse('Banana') );
 console.log(isFalse([1, 2]));


//==================================
console.log('==================');
console.log('===not==');
// 3. Define a function named `not` that takes in any input and returns the boolean opposite of the provided input.
        
//         not(false)                  // true
//         not(0)                      // true
//         not("")                     // true
//         not(null)                   // true
//         not(NaN)                    // true
//         not(undefined)              // true
//         not(true)                   // false
//         not("something")            // false


//==================================
console.log('==================');
console.log('===addOne==');
// 4. Define a function named `addOne` that takes in a single input. If the input is a number or a numeric string, return the value plus one.

function addOne(x) {
        y = (parseFloat(x));
        return y + 1;
       // return parseFloat(x) + 1;
}

//         addOne(0)                    // 1
//         addOne(2)                    // 3
//         addOne(-5)                   // -4 
//         addOne(5.789)                // 6.789
//         addOne(Infinity)             // Infinity
//         addOne("2")                  // 3
//         addOne("0")                  // 1
//         addOne("banana")             // NaN
console.log(addOne(0));
console.log(addOne(2));
console.log(addOne(-5));
console.log(addOne(5.789));
console.log(addOne(Infinity));
console.log(addOne("2"));
console.log(addOne("0"));
console.log(addOne("banana"));


//==================================
console.log('==================');
console.log('===isEven==');
// 5. Define a function named `isEven` that takes in a single input. If the input is an even number or a string containing an even number, return `true`. Any other input should return false for the output.
   
function isEven(x) {
       // y = parseFloat(x);
       // if(y % 2 === 0)
       // return true;
       // else return false;
       return parseInt(x) % 2 === 0;
}
//         isEven(2)                   // true
//         isEven(-8)                  // true
//         isEven(0)                   // true
//         isEven("42")                // true
//         isEven(1)                   // false
//         isEven("-3")                // false
//         isEven(false)               // false
//         isEven("banana")            // false
console.log(isEven(2));
console.log(isEven(-8));
console.log(isEven(0));
console.log(isEven("42"));
console.log(isEven(1));
console.log(isEven("-3"));
console.log(isEven(false));
console.log(isEven("banana"));

//==================================
console.log('==================');
console.log('===isIdentical==');
// 6. Define a function named `isIdentical` that takes in two input arguments. If each input is equal both in data type and in value, then return `true`. If the values are not the same data type or not the same value, return `false`.

function isIdentical(a,b) {
        if(a === b)
        return true;
        else return false;
}
//         isIdentical(3, 3)                     // true
//         isIdentical(false, false)             // true
//         isIdentical("hello", "hello")         // true
//         isIdentical(3, 3.0)                   // true
//         isIdentical(undefined, undefined)     // true
//         isIdentical(2, "2")                   // false
//         isIdentical("javascript", "java")     // false
console.log(isIdentical(3, 3));
console.log(isIdentical(false, false) );
console.log(isIdentical("hello", "hello"));
console.log(isIdentical(3, 3.0));
console.log(isIdentical(undefined, undefined));
console.log(isIdentical(2, "2"));
console.log(isIdentical("javascript", "java") );



//==================================
console.log('==================');
console.log('===isEqual==');
// 7. Define a function named `isEqual` that takes in two input arguments. If each argument is equal only in value, then return true. Otherwise return false.
function isEqual(a,b) {
        if(a == b)
        return true;
        else return false;
} 
//         isEqual(3, "3")                       // true
//         isEqual("abc123", "abc123")           // true
//         isEqual(true, 1)                      // true
//         isEqual(0, false)                     // true
//         isEqual(4, -5)                        // false
//         isEqual("java", "javascript")         // false
console.log(isEqual(3, "3"));
console.log(isEqual("abc123", "abc123"));
console.log(isEqual(true, 1));
console.log(isEqual(0, false));
console.log(isEqual(4, -5));
console.log(isEqual("java", "javascript"));


//==================================
console.log('==================');
console.log('===or==');
// 8. Define a function named `or` that takes in two input arguments. The output returned should be the result of an `or` operation on both inputs.
  
function or(x, y){
        //if(x == true || y == true)
        if(x || y)
        return true
        else return false;
}
//         or(true, true)                    // true
//         or(true, false)                   // true
//         or(false, true)                   // true
//         or(false, false)                  // false
//         or("hello", "world")              // "hello" (this behavior is non-obvious, research more!)
console.log(or(true, true));
console.log(or(true, false));
console.log(or(false, true));
console.log(or(false, false)); 
console.log(or("hello", "world"));
        
//==================================


console.log('==================');
console.log('===AND==');
// 9. Define a function named `and` that takes in two input arguments and returns the result of a logical `and` operation of both inputs.
  function and(x, y){
          //if(x == true && y == true)
          if(x && y)
          return true
          else return false
};
//         and(true, true)                    // true
//         and(true, false)                   // false
//         and(false, true)                   // false
//         and(false, false)                  // false
//         and("hello", "world")              // "world" (this behavior is non-obvious, research more)
console.log(and(true, true));
console.log(and(true, false));
console.log(and(false, true));
console.log(and(false, false));
console.log(and("hello", "world"));


console.log('==================');
console.log('===CONCAT==');
// 10. Define a function named `concat` that takes in two input arguments. If both arguments are strings, then return the concatenated result. If two numbers are provided, then return the string concatenation of each set of numerals.
    
function concat(x, y){
        return x.toString() + y.toString();
      
}
//         concat("code", "up")                // "codeup"
//         concat("connect", 4)                // "connect4"
//         concat("hello", "world")            // "helloworld"
//         concat(4, 2)                        // "42"
//         concat(true, true)                  // "truetrue"
console.log(concat("code", "up"));
console.log(concat("connect", 4));
console.log(concat("hello", "world"));
console.log(concat(4, 2));
console.log(concat(true, true));











//========================================================
// Define a function named isString that takes in a value and returns a boolean if the argument provided is a string or not.

// pass into and return true if type of input is string
function isString(x) {
        if (typeof x == "string") {
            return true;
        } else return false
    }
    
    console.log(isString(2)); //false
    // console.log(isString(true)); //false
    console.log(isString("yes")); //true
    
    
    // Define a function named isNotString that accepts an input and returns true or false based on whether an input is not a string. Numeric strings will count as strings and should return false.
    function isNotString(x) {
        if (typeof x !== "sting") {
            return true
        } else return false
    }
    
    console.log(isNotString(2)); //true
    // console.log(isNotString(true)); //true
    console.log(isNotString("yes")); //false
    
    
    // Define a function named isNotEmptyString that takes in a value and returns a boolean if the argument provided is an empty string or not.
    
    
    function isNotEmptyString(x) {
        if (typeof x == "sting" && x.length > 0) {
            return true;
        } else {
            return false
        }
    }
    
    
    // console.log(isNotEmptyString(2)); //false
    // console.log(isNotEmptyString(false)); //false
    // console.log(isNotEmptyString(true)); //false
    // console.log(isNotEmptyString("yes")); //true
    // console.log(isNotEmptyString("")); //false
    // console.log(isNotEmptyString("banana")); //true
    
    
    // Define a function named isANumber that takes in a value and returns true if the input is a number.
    
    function isANumber(x) {
        //console.log(typeof(x));
        if (typeof x === "number") {
            return true;
        } else {
            return false;
        }
    }
    
    // console.log(isANumber(2)); //true
    // console.log(isANumber("yes")); //false
    console.log(isANumber(false)); //false
    // console.log(isANumber(true)); //false
    // console.log(isANumber("5")); //false
    
    
    // Define a function named isNumeric that takes in a value and returns true if the input is numeric or not. Numeric strings are numeric and should return true.
    /*
    This mean take 2 and "2" and if is NOT "Not A Number" the turn the string into a number/
     */
    
    function isNumeric(x) {
        return !isNaN(parseFloat(x))
    }
    
    // console.log(isNumeric(2)); //true
    // console.log(isNumeric("yes")); //false
    // console.log(isNumeric(false)); //false
    // console.log(isNumeric(true)); //false
    // console.log(isNumeric("5")); //true
    
    
    // Define a function named isZero that will return true when passed an argument of the numeric value 0, and return false for all other arguments.
    
    function isTen(x) {
        var y = parseInt(x);
        return (y == 10); // this can end here -> however, the code below works and is MORE explicit.
        // if (y === 10){
        // return true;
        // } else {
        // return false
        //}
    }
    
    // console.log(isTen(2)); //false
    // console.log(isTen(12)); //false
    // console.log(isTen("yes")); //false
    // console.log(isTen(false)); //false
    // console.log(isTen(true)); //false
    // console.log(isTen("5")); //false
    // console.log(isTen(10)); //true
    // console.log(isTen("10")); //true
    
    
    // Define a function named isMoreThanTen that accepts a number and returns true or false based on whether the input is more than ten.
    function isMoreThanTen(x) {
        if (x > 10) {
            return true;
        } else {
            return false
        }
    }
    
    // console.log(isMoreThanTen(2)); //false
    // console.log(isMoreThanTen(12)); //true
    // console.log(isMoreThanTen("yes")); //false
    // console.log(isMoreThanTen(false)); //false
    // console.log(isMoreThanTen(true)); //false
    // console.log(isMoreThanTen("5")); //false
    
    
    // Define a function named isPositive that accepts an input and returns true or false based on whether the input is above zero. Any non-numeric input should return false.
    
    function isNegative(x) {
        var x = (parseFloat(x));
        if ((x < 0) && (typeof x == 'number')) {
            return true
        } else {
            return false
        }
    }
    
     console.log(isNegative(-2)); //true
    // console.log(isNegative(12)); //false
    // console.log(isNegative("yes")); //false
    // console.log(isNegative(false)); //false
    // console.log(isNegative(true)); //false
    // console.log(isNegative("5")); //false




//define a function names addFive that takes an input and adds 5, if the input is NOT numeric the function should return false.
function addFive(x) {
    x = parseInt(x); /*"cat"*/
    // ensuring the x is a number and not a letter
    x += 5; /*"cat" + 5 = "cat5"*/
    // same as x + 5
    if (isNaN(x)) {
        return false
    } else {
        return x;
    }
}

function addFive2(input) {
    var x = 5;
    var input = parseInt(input);
    if (isNaN(input)) {
        return false;
    } else {
        return input + x;
    }
}


console.log(addFive("2")); // 7
console.log(addFive(5)); // 10
console.log(addFive(true)); // false
console.log(addFive("cat")); // false




//define a function names toTheThird that takes an input and returns that input to the third power (cubed); if the input is not numeric the function should return false
function toTheThird (x){
    x = parseInt(x);
    if (isNaN(x)){
        return false;
    } else{
        return x * x * x;
    }
}

function toTheThird2(input) {
    input = parseInt(input);
    if(isNaN(input)) {
        return false;
    } else {
        return input * input * input;
    }
}
//
//
// console.log(toTheThird("2")); // 8
// console.log(toTheThird(5)); // 125
// console.log(toTheThird(true)); // false
// console.log(toTheThird("cat")); // false


// Define a function named lowerCase that takes in a single input. If the input is not a string, return false. If the input is a non-numeric string, then return it with all the letters capitalized.
function lowerCase(x){
    if (!isNaN(parseInt(x))) {
        return false;
    } else if (typeof (x) === "string"){
        return x.toLowerCase();
    } else{
        return false;
    }
}



// console.log(lowerCase("2")); // false
// console.log(lowerCase(5)); // false
// console.log(lowerCase(true)); // false
// console.log(lowerCase("CAT")); // CAT

// Write a function named sumOfCubes that takes in two inputs. If both inputs are numeric, sumOfSquares should square each input and return the sum of them added together. For example, if we pass a and b then we should square a and add it to the square of b. If either or both inputs are not numeric, sumOfSquares should return false.

function sumOFCubes(x,y){
    x= parseInt(x);
    y = parseInt(y);
    if(isNaN(x) || isNaN(y)){
        return false;
    }else{
        return(x*x*x)+(y*y*y);
    }
}
//
// console.log(sumOFCubes("2", "5")); //8 + 125 = 133
// console.log(sumOFCubes(5, 4)); //125 + 64 = 189
// console.log(sumOFCubes(true, true)); //false
// console.log(sumOFCubes("cat", "dog")); //false


// Write a function named divide that takes in two inputs. If both inputs provided are numeric, divide returns the result of the first input multiplied by the second. If either or both inputs are not numeric, divide should return false.
function divide (x,y){
    x= parseFloat(x);
    y = parseFloat(y);
    if(isNaN(x) || isNaN(y)){
        return false;
    } else if(y ===0) {
        return false
    }else{
        return x / y;
    }
}
// //
// //
// console.log(divide("12", "4")); // 12 / 4 = 3
// console.log(divide(20, 6)); // 20 / 6 = 3.33333~
// console.log(divide(true, true)); // false
// console.log(divide("cat", "dog")); //false
//
// //hey, aren't there special rules when it comes to dividing with or by 0???
//
// console.log(divide(0, 12));
// console.log(divide(12, 0));

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//


// Write a function named reverseUpperCaseString that takes in a single input. If the input is a numeric string, then return false. If the input is a string, return that string capitalized and reversed
function reverseUpperCaseString (x){
    if (!isNaN(parseFloat(x))){
        return false;
    } else if (typeof (x ) !== "string"){
        return false;
    } else {
        x = (x.split("").reverse().join("").toUpperCase());
        return x;
    }
}
//
// console.log(reverseUpperCaseString(true)); // false
// console.log(reverseUpperCaseString(18)); // false
// console.log(reverseUpperCaseString("15")); // false
// console.log(reverseUpperCaseString("cat")); // TAC
// console.log(reverseUpperCaseString("RaCeCaR")); // RACECAR
// console.log(reverseUpperCaseString("yRaNoiTCId")); // DICTIONARY
//

// Write a function named getLowestNumber that takes in 3 arguments. If all 3 inputs are numbers or numeric strings, then return the highest number. If any of the 3 inputs is missing or non-numeric, then return false.
function getLowestNumber(x,y,z){
    x = parseInt(x);
    y = parseInt(y);
    z = parseInt(z);
    if (!isNaN (x) &&  (!isNaN(y)) && (!isNaN(z))){
        return Math.min(x,y,z);
    } else return false;
}
//
// console.log(getLowestNumber(1, 15, 30)); // 1
// console.log(getLowestNumber(true, false, true)); // false
// console.log(getLowestNumber("1", "15", "30")); // 1
// console.log(getLowestNumber("cat", "dog", "hippopotamus")); // false
// console.log(getLowestNumber(1, "otter", 30)); // false
// console.log(getLowestNumber(-53, 72, 7)); // -53
/**

## Setup Instructions
- If you want more practice working with Git and Github, fork this project on GitHub and then clone your fork to your development box, so you have both your own local copy and a remote in GitHub where you can push your solutions.
- Go here https://glitch.com/edit/#!/remix/ten-functions if you only want to focus on the problems and side-step the git process.

## Getting Started
0. Setup your own copy of the code using the instructions above
1. Read the exercise prompts listed below
2. Define your functions that solve the prompts inside of `solutions.js`.
3. Use feedback to improve responses
4. Submit issues and patches to the <a href="https://github.com/ryanorsinger/ten-functions/issues">Ten Functions project</a>


## The "Ten Functions" Exercises ðŸ‘Ÿ
0. The comments to the right of the function call example demonstrate the output of the function's operation on the provided input(s). Add your function definitions to `solutions.js`. Refresh `results.html` to run automated tests for feedback on your solutions.

--
3. Use feedback to improve responses
4. Submit issues and patches to the <a href="https://github.com/ryanorsinger/ten-functions/issues">Ten Functions project</a>


## The "Ten Functions" Exercises ðŸ‘Ÿ
0. The comments to the right of the function call example demonstrate the output of the function's operation on the provided input(s). Add your function definitions to `solutions.js`. Refresh `results.html` to run automated tests for feedback on your solutions.
*/

console.log('js file is linked');

//==================================
console.log('==================');
console.log('==isTrue==');
// 1. Define a function named `isTrue` that takes in any input and returns true if the input provided is exactly equal to `true` in value and data type.
 function isTrue(x){
         if(x === true)
         return true;
         else return false;
 }
 console.log(isTrue(true) );
 console.log(isTrue(false) );
 console.log(isTrue(0) );
 console.log(isTrue(null) );
 console.log(isTrue('true') );
 console.log(isTrue('Banana') );
 console.log(isTrue([1, 2]) );
//         isTrue(true)             // true
//         isTrue(false)            // false
//         isTrue(0)                // false
//         isTrue(null)             // false
//         isTrue("true")           // false
//         isTrue("Banana")         // false
//         isTrue([1, 2])           // false



//==================================
console.log('==================');
console.log('===isFalse==');
// 2. Define a function named `isFalse` that takes in a value and returns a true if and only if the provided input is equal to false in both type and value.
  
function isFalse(x){
       //  if(x === false)
       //  return true;
       //  else return false;
       return x === false;
}
//         isFalse(false)             // true
//         isFalse(true)              // false
//         isFalse(0)                 // false
//         isFalse(null)              // false
//         isFalse("")                // false
//         isFalse("Banana")          // false
//         isFalse([1, 2])            // false

console.log(isFalse(false));
 console.log(isFalse(true));
 console.log(isFalse(0));
 console.log(isFalse(null));
 console.log(isFalse(""));
 console.log(isFalse('Banana') );
 console.log(isFalse([1, 2]));


//==================================
console.log('==================');
console.log('===not==');
// 3. Define a function named `not` that takes in any input and returns the boolean opposite of the provided input.
        
//         not(false)                  // true
//         not(0)                      // true
//         not("")                     // true
//         not(null)                   // true
//         not(NaN)                    // true
//         not(undefined)              // true
//         not(true)                   // false
//         not("something")            // false


//==================================
console.log('==================');
console.log('===addOne==');
// 4. Define a function named `addOne` that takes in a single input. If the input is a number or a numeric string, return the value plus one.

function addOne(x) {
        y = (parseFloat(x));
        return y + 1;
       // return parseFloat(x) + 1;
}

//         addOne(0)                    // 1
//         addOne(2)                    // 3
//         addOne(-5)                   // -4 
//         addOne(5.789)                // 6.789
//         addOne(Infinity)             // Infinity
//         addOne("2")                  // 3
//         addOne("0")                  // 1
//         addOne("banana")             // NaN
console.log(addOne(0));
console.log(addOne(2));
console.log(addOne(-5));
console.log(addOne(5.789));
console.log(addOne(Infinity));
console.log(addOne("2"));
console.log(addOne("0"));
console.log(addOne("banana"));


//==================================
console.log('==================');
console.log('===isEven==');
// 5. Define a function named `isEven` that takes in a single input. If the input is an even number or a string containing an even number, return `true`. Any other input should return false for the output.
   
function isEven(x) {
       // y = parseFloat(x);
       // if(y % 2 === 0)
       // return true;
       // else return false;
       return parseInt(x) % 2 === 0;
}
//         isEven(2)                   // true
//         isEven(-8)                  // true
//         isEven(0)                   // true
//         isEven("42")                // true
//         isEven(1)                   // false
//         isEven("-3")                // false
//         isEven(false)               // false
//         isEven("banana")            // false
console.log(isEven(2));
console.log(isEven(-8));
console.log(isEven(0));
console.log(isEven("42"));
console.log(isEven(1));
console.log(isEven("-3"));
console.log(isEven(false));
console.log(isEven("banana"));

//==================================
console.log('==================');
console.log('===isIdentical==');
// 6. Define a function named `isIdentical` that takes in two input arguments. If each input is equal both in data type and in value, then return `true`. If the values are not the same data type or not the same value, return `false`.

function isIdentical(a,b) {
        if(a === b)
        return true;
        else return false;
}
//         isIdentical(3, 3)                     // true
//         isIdentical(false, false)             // true
//         isIdentical("hello", "hello")         // true
//         isIdentical(3, 3.0)                   // true
//         isIdentical(undefined, undefined)     // true
//         isIdentical(2, "2")                   // false
//         isIdentical("javascript", "java")     // false
console.log(isIdentical(3, 3));
console.log(isIdentical(false, false) );
console.log(isIdentical("hello", "hello"));
console.log(isIdentical(3, 3.0));
console.log(isIdentical(undefined, undefined));
console.log(isIdentical(2, "2"));
console.log(isIdentical("javascript", "java") );



//==================================
console.log('==================');
console.log('===isEqual==');
// 7. Define a function named `isEqual` that takes in two input arguments. If each argument is equal only in value, then return true. Otherwise return false.
function isEqual(a,b) {
        if(a == b)
        return true;
        else return false;
} 
//         isEqual(3, "3")                       // true
//         isEqual("abc123", "abc123")           // true
//         isEqual(true, 1)                      // true
//         isEqual(0, false)                     // true
//         isEqual(4, -5)                        // false
//         isEqual("java", "javascript")         // false
console.log(isEqual(3, "3"));
console.log(isEqual("abc123", "abc123"));
console.log(isEqual(true, 1));
console.log(isEqual(0, false));
console.log(isEqual(4, -5));
console.log(isEqual("java", "javascript"));


//==================================
console.log('==================');
console.log('===or==');
// 8. Define a function named `or` that takes in two input arguments. The output returned should be the result of an `or` operation on both inputs.
  
function or(x, y){
        //if(x == true || y == true)
        if(x || y)
        return true
        else return false;
}
//         or(true, true)                    // true
//         or(true, false)                   // true
//         or(false, true)                   // true
//         or(false, false)                  // false
//         or("hello", "world")              // "hello" (this behavior is non-obvious, research more!)
console.log(or(true, true));
console.log(or(true, false));
console.log(or(false, true));
console.log(or(false, false)); 
console.log(or("hello", "world"));
        
//==================================


console.log('==================');
console.log('===AND==');
// 9. Define a function named `and` that takes in two input arguments and returns the result of a logical `and` operation of both inputs.
  function and(x, y){
          //if(x == true && y == true)
          if(x && y)
          return true
          else return false
};
//         and(true, true)                    // true
//         and(true, false)                   // false
//         and(false, true)                   // false
//         and(false, false)                  // false
//         and("hello", "world")              // "world" (this behavior is non-obvious, research more)
console.log(and(true, true));
console.log(and(true, false));
console.log(and(false, true));
console.log(and(false, false));
console.log(and("hello", "world"));


console.log('==================');
console.log('===CONCAT==');
// 10. Define a function named `concat` that takes in two input arguments. If both arguments are strings, then return the concatenated result. If two numbers are provided, then return the string concatenation of each set of numerals.
    
function concat(x, y){
        return x.toString() + y.toString();
      
}
//         concat("code", "up")                // "codeup"
//         concat("connect", 4)                // "connect4"
//         concat("hello", "world")            // "helloworld"
//         concat(4, 2)                        // "42"
//         concat(true, true)                  // "truetrue"
console.log(concat("code", "up"));
console.log(concat("connect", 4));
console.log(concat("hello", "world"));
console.log(concat(4, 2));
console.log(concat(true, true));











//========================================================
// Define a function named isString that takes in a value and returns a boolean if the argument provided is a string or not.

// pass into and return true if type of input is string
function isString(x) {
        if (typeof x == "string") {
            return true;
        } else return false
    }
    
    console.log(isString(2)); //false
    // console.log(isString(true)); //false
    console.log(isString("yes")); //true
    
    
    // Define a function named isNotString that accepts an input and returns true or false based on whether an input is not a string. Numeric strings will count as strings and should return false.
    function isNotString(x) {
        if (typeof x !== "sting") {
            return true
        } else return false
    }
    
    console.log(isNotString(2)); //true
    // console.log(isNotString(true)); //true
    console.log(isNotString("yes")); //false
    
    
    // Define a function named isNotEmptyString that takes in a value and returns a boolean if the argument provided is an empty string or not.
    
    
    function isNotEmptyString(x) {
        if (typeof x == "sting" && x.length > 0) {
            return true;
        } else {
            return false
        }
    }
    
    
    // console.log(isNotEmptyString(2)); //false
    // console.log(isNotEmptyString(false)); //false
    // console.log(isNotEmptyString(true)); //false
    // console.log(isNotEmptyString("yes")); //true
    // console.log(isNotEmptyString("")); //false
    // console.log(isNotEmptyString("banana")); //true
    
    
    // Define a function named isANumber that takes in a value and returns true if the input is a number.
    
    function isANumber(x) {
        //console.log(typeof(x));
        if (typeof x === "number") {
            return true;
        } else {
            return false;
        }
    }
    
    // console.log(isANumber(2)); //true
    // console.log(isANumber("yes")); //false
    console.log(isANumber(false)); //false
    // console.log(isANumber(true)); //false
    // console.log(isANumber("5")); //false
    
    
    // Define a function named isNumeric that takes in a value and returns true if the input is numeric or not. Numeric strings are numeric and should return true.
    /*
    This mean take 2 and "2" and if is NOT "Not A Number" the turn the string into a number/
     */
    
    function isNumeric(x) {
        return !isNaN(parseFloat(x))
    }
    
    // console.log(isNumeric(2)); //true
    // console.log(isNumeric("yes")); //false
    // console.log(isNumeric(false)); //false
    // console.log(isNumeric(true)); //false
    // console.log(isNumeric("5")); //true
    
    
    // Define a function named isZero that will return true when passed an argument of the numeric value 0, and return false for all other arguments.
    
    function isTen(x) {
        var y = parseInt(x);
        return (y == 10); // this can end here -> however, the code below works and is MORE explicit.
        // if (y === 10){
        // return true;
        // } else {
        // return false
        //}
    }
    
    // console.log(isTen(2)); //false
    // console.log(isTen(12)); //false
    // console.log(isTen("yes")); //false
    // console.log(isTen(false)); //false
    // console.log(isTen(true)); //false
    // console.log(isTen("5")); //false
    // console.log(isTen(10)); //true
    // console.log(isTen("10")); //true
    
    
    // Define a function named isMoreThanTen that accepts a number and returns true or false based on whether the input is more than ten.
    function isMoreThanTen(x) {
        if (x > 10) {
            return true;
        } else {
            return false
        }
    }
    
    // console.log(isMoreThanTen(2)); //false
    // console.log(isMoreThanTen(12)); //true
    // console.log(isMoreThanTen("yes")); //false
    // console.log(isMoreThanTen(false)); //false
    // console.log(isMoreThanTen(true)); //false
    // console.log(isMoreThanTen("5")); //false
    
    
    // Define a function named isPositive that accepts an input and returns true or false based on whether the input is above zero. Any non-numeric input should return false.
    
    function isNegative(x) {
        var x = (parseFloat(x));
        if ((x < 0) && (typeof x == 'number')) {
            return true
        } else {
            return false
        }
    }
    
     console.log(isNegative(-2)); //true
    // console.log(isNegative(12)); //false
    // console.log(isNegative("yes")); //false
    // console.log(isNegative(false)); //false
    // console.log(isNegative(true)); //false
    // console.log(isNegative("5")); //false




//define a function names addFive that takes an input and adds 5, if the input is NOT numeric the function should return false.
function addFive(x) {
    x = parseInt(x); /*"cat"*/
    // ensuring the x is a number and not a letter
    x += 5; /*"cat" + 5 = "cat5"*/
    // same as x + 5
    if (isNaN(x)) {
        return false
    } else {
        return x;
    }
}

function addFive2(input) {
    var x = 5;
    var input = parseInt(input);
    if (isNaN(input)) {
        return false;
    } else {
        return input + x;
    }
}


console.log(addFive("2")); // 7
console.log(addFive(5)); // 10
console.log(addFive(true)); // false
console.log(addFive("cat")); // false




//define a function names toTheThird that takes an input and returns that input to the third power (cubed); if the input is not numeric the function should return false
function toTheThird (x){
    x = parseInt(x);
    if (isNaN(x)){
        return false;
    } else{
        return x * x * x;
    }
}

function toTheThird2(input) {
    input = parseInt(input);
    if(isNaN(input)) {
        return false;
    } else {
        return input * input * input;
    }
}
//
//
// console.log(toTheThird("2")); // 8
// console.log(toTheThird(5)); // 125
// console.log(toTheThird(true)); // false
// console.log(toTheThird("cat")); // false


// Define a function named lowerCase that takes in a single input. If the input is not a string, return false. If the input is a non-numeric string, then return it with all the letters capitalized.
function lowerCase(x){
    if (!isNaN(parseInt(x))) {
        return false;
    } else if (typeof (x) === "string"){
        return x.toLowerCase();
    } else{
        return false;
    }
}



// console.log(lowerCase("2")); // false
// console.log(lowerCase(5)); // false
// console.log(lowerCase(true)); // false
// console.log(lowerCase("CAT")); // CAT

// Write a function named sumOfCubes that takes in two inputs. If both inputs are numeric, sumOfSquares should square each input and return the sum of them added together. For example, if we pass a and b then we should square a and add it to the square of b. If either or both inputs are not numeric, sumOfSquares should return false.

function sumOFCubes(x,y){
    x= parseInt(x);
    y = parseInt(y);
    if(isNaN(x) || isNaN(y)){
        return false;
    }else{
        return(x*x*x)+(y*y*y);
    }
}
//
// console.log(sumOFCubes("2", "5")); //8 + 125 = 133
// console.log(sumOFCubes(5, 4)); //125 + 64 = 189
// console.log(sumOFCubes(true, true)); //false
// console.log(sumOFCubes("cat", "dog")); //false


// Write a function named divide that takes in two inputs. If both inputs provided are numeric, divide returns the result of the first input multiplied by the second. If either or both inputs are not numeric, divide should return false.
function divide (x,y){
    x= parseFloat(x);
    y = parseFloat(y);
    if(isNaN(x) || isNaN(y)){
        return false;
    } else if(y ===0) {
        return false
    }else{
        return x / y;
    }
}
// //
// //
// console.log(divide("12", "4")); // 12 / 4 = 3
// console.log(divide(20, 6)); // 20 / 6 = 3.33333~
// console.log(divide(true, true)); // false
// console.log(divide("cat", "dog")); //false
//
// //hey, aren't there special rules when it comes to dividing with or by 0???
//
// console.log(divide(0, 12));
// console.log(divide(12, 0));

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//


// Write a function named reverseUpperCaseString that takes in a single input. If the input is a numeric string, then return false. If the input is a string, return that string capitalized and reversed
function reverseUpperCaseString (x){
    if (!isNaN(parseFloat(x))){
        return false;
    } else if (typeof (x ) !== "string"){
        return false;
    } else {
        x = (x.split("").reverse().join("").toUpperCase());
        return x;
    }
}
//
// console.log(reverseUpperCaseString(true)); // false
// console.log(reverseUpperCaseString(18)); // false
// console.log(reverseUpperCaseString("15")); // false
// console.log(reverseUpperCaseString("cat")); // TAC
// console.log(reverseUpperCaseString("RaCeCaR")); // RACECAR
// console.log(reverseUpperCaseString("yRaNoiTCId")); // DICTIONARY
//

// Write a function named getLowestNumber that takes in 3 arguments. If all 3 inputs are numbers or numeric strings, then return the highest number. If any of the 3 inputs is missing or non-numeric, then return false.
function getLowestNumber(x,y,z){
    x = parseInt(x);
    y = parseInt(y);
    z = parseInt(z);
    if (!isNaN (x) &&  (!isNaN(y)) && (!isNaN(z))){
        return Math.min(x,y,z);
    } else return false;
}
//
// console.log(getLowestNumber(1, 15, 30)); // 1
// console.log(getLowestNumber(true, false, true)); // false
// console.log(getLowestNumber("1", "15", "30")); // 1
// console.log(getLowestNumber("cat", "dog", "hippopotamus")); // false
// console.log(getLowestNumber(1, "otter", 30)); // false
// console.log(getLowestNumber(-53, 72, 7)); // -53
